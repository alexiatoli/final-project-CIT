Final Project Documentation
This document outlines the implementation of styling, responsiveness, and UI/UX design decisions in our project using SCSS and Bootstrap.

1. Use of SCSS (Sassy CSS)
To manage and scale our CSS efficiently, we used SCSS, which offers powerful features over plain CSS:

Variables: Common values like colors, font sizes, and spacing were defined as variables to maintain consistency across the site.

Nesting: Styles were nested to mirror the HTML structure, improving readability.

Mixins: Reusable code blocks were created for repeated patterns such as buttons and breakpoints (media queries).

Partials: SCSS files were modularized (e.g., _header.scss, _layout.scss) and imported into a main styles.scss file.

Compilation: SCSS was compiled into a single CSS file using a task runner (e.g., Gulp or npm script) and linked in HTML files.

2. Responsiveness
We ensured a mobile-first, responsive design using:

Bootstrap Grid System: Layouts were built with .container, .row, and .col- classes for fluid responsiveness.

Media Queries: Custom SCSS breakpoints targeted screen widths for mobile, tablet, and desktop to adjust padding, font sizes, and flex layouts.

Bootstrap Utility Classes: Classes like .d-flex, .flex-wrap, .justify-content-center, and .text-center helped optimize alignment and spacing on various screen sizes.

Responsive Images: All images use the .img-fluid class to scale within their containers.

Extensive testing was done across breakpoints (576px, 768px, 992px, 1200px+) to ensure usability.

3. Hamburger Menu
To enhance mobile navigation:

We implemented Bootstrap’s responsive .navbar, which automatically converts to a hamburger menu on smaller screens.

The toggle button (.navbar-toggler) was added to control the collapse behavior of menu items.

The button includes proper aria-* attributes for screen readers, improving accessibility.

4. Favicon
The favicon was designed to represent the site theme and maintain branding consistency.

It uses the project’s primary SCSS color and was optimized for small sizes (16x16, 32x32).

Created using favicon.io, and included in HTML <head> as:

html
<link rel="icon" type="image/png" href="favicon.png">

5. Bootstrap Features Used
We selected the following Bootstrap components for rapid development and enhanced user experience:

Navbar (.navbar)
Created a responsive header that collapses into a hamburger menu.

Provided semantic and accessible navigation.

Cards (.card)
Used to present structured content like service offerings, blog previews, or product features.

Styled uniformly for consistency across sections.

Carousel (.carousel)
Used to feature multiple highlighted items (e.g., promotions or images).

Minimal JavaScript needed and includes swipe/touch support on mobile.

Modals (.modal)
Implemented for login, alerts, and confirmations.

Helped prevent page reloads and offered a seamless user experience.

6. ACC Principles: Accessibility, Consistency, Clarity
Accessibility: Used aria-* attributes for menus and buttons, ensured keyboard navigation, and tested color contrast.

Consistency: Reused SCSS variables and mixins, and followed Bootstrap conventions across components.

Clarity: Clean layouts, readable font sizes, and intuitive navigation helped users find information quickly.
